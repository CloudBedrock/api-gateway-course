AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AlarmEMail:
    Description: EMail address to notify if there are any operational issues
    Type: String
    AllowedPattern: >-
      ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
Resources:
  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - "sqs:SendMessage"
                Resource: !GetAtt MyQueue.Arn
  MyQueue:
    Type: 'AWS::SQS::Queue'
    Properties: {}
  AlarmTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref AlarmEMail
          Protocol: email
  QueueDepthAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Alarm if queue depth grows beyond 10 messages
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt 
            - MyQueue
            - QueueName
      Statistic: Sum
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '10'
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmTopic
      InsufficientDataActions:
        - !Ref AlarmTopic
  MessageAgeAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: If Message Age is Older than 1 hour
      Namespace: AWS/SQS
      MetricName: ApproximateAgeOfOldestMessage
      Dimensions:
        - Name: QueueName
          Value: !GetAtt 
            - MyQueue
            - QueueName
      Statistic: Maximum
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '120'
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmTopic
      InsufficientDataActions:
        - !Ref AlarmTopic
  SQSProxyAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SQS Proxy
      Description: A demo API SQS Proxy
      Body:
        openapi: "3.0.1"
        info:
          title: "sqs-service-proxy"
          version: "2017-04-29T15:22:50Z"
        servers:
        - url: "https://yvsnpkza78.execute-api.us-east-1.amazonaws.com/{basePath}"
          variables:
            basePath:
              default: "/dev"
        paths: 
          /v1/send:
            get:
              parameters:
              - name: "MessageBody"
                in: "query"
                required: true
                schema:
                  type: "string"
              responses:
                '200':
                  description: "200 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                credentials: !GetAtt
                  - RootRole
                  - Arn
                uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - ':sqs:path/'
                    - !Ref 'AWS::AccountId'
                    - '/'
                    - !GetAtt MyQueue.QueueName
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.querystring.MessageBody: "method.request.querystring.MessageBody"
                  integration.request.querystring.Action: "'SendMessage'"
                  integration.request.header.Content-Type: "'application/json'"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws"
            post:
              responses:
                '200':
                  description: "200 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                credentials: !GetAtt
                  - RootRole
                  - Arn
                uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - ':sqs:path/'
                    - !Ref 'AWS::AccountId'
                    - '/'
                    - !GetAtt MyQueue.QueueName
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: "Action=SendMessage&MessageBody=$util.urlEncode($util.escapeJavaScript($input.json('$')))"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                type: "aws"
            options:
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        components:
          schemas:
            Empty:
              title: "Empty Schema"
              type: "object"
Outputs:
  API:
    Description: Created API
    Value: !Ref SQSProxyAPI
  QueueURL:
    Description: URL of newly created SQS Queue
    Value: !Ref MyQueue
  QueueARN:
    Description: ARN of newly created SQS Queue
    Value: !GetAtt 
      - MyQueue
      - Arn
  QueueName:
    Description: Name newly created SQS Queue
    Value: !GetAtt 
      - MyQueue
      - QueueName
  SQSProxyRole:
    Description: Name newly created SQS Queue
    Value: !Ref RootRole
